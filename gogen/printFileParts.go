package gogen

import (
	"fmt"
	"io"
	"sort"
	"strings"

	"github.com/nickwells/param.mod/v5/param"
	"github.com/nickwells/param.mod/v5/param/phelp"
)

// PrintPreambleOrDie prints the introductory comments for the file to be
// generated. Note that the package name is written when the file is created;
// this is because the go list command fails if any go file is empty when it
// runs.
func PrintPreambleOrDie(f io.Writer, ps *param.PSet) {
	fmt.Fprint(f, `
// This code was generated by `+ps.ProgBaseName()+`
// with parameters set at:
`)
	for _, pg := range ps.GetGroups() {
		if strings.HasPrefix(pg.Name, phelp.CommonParamsGroupNamePrefix()) {
			continue
		}

		for _, p := range pg.Params {
			whereSet := p.WhereSet()
			for _, ws := range whereSet {
				fmt.Fprintln(f, "//\t"+ws)
			}
		}
	}
	fmt.Fprint(f, `//
// *** DO NOT EDIT ***
`)
}

// PrintImports adds the import statements, if any, one per line to the file
func PrintImports(f io.Writer, imps ...string) {
	if len(imps) == 0 {
		return
	}
	if len(imps) == 1 {
		fmt.Fprintf(f, "import %q\n", imps[0])
		return
	}
	fmt.Fprintln(f, "import (")
	var stdLib []string
	var other []string

	for _, i := range imps {
		if i == "" {
			continue
		}
		parts := strings.Split(i, "/")
		if strings.ContainsRune(parts[0], '.') {
			other = append(other, i)
		} else {
			stdLib = append(stdLib, i)
		}
	}
	sort.Strings(stdLib)
	sort.Strings(other)
	for _, i := range stdLib {
		fmt.Fprintf(f, "\t%q\n", i)
	}
	if len(stdLib) > 0 {
		fmt.Fprintln(f)
	}
	for _, i := range other {
		fmt.Fprintf(f, "\t%q\n", i)
	}
	fmt.Fprintln(f, ")")
}
